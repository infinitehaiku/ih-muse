name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  rust-release:
    name: Rust Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_created: ${{ steps.release-drafter.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Release Drafter
        id: release-drafter
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: .github/release-drafter.yml

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish IH-Muse package
        run: |
          cd crates
          cargo publish --allow-dirty -p ih-muse-proto --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-record --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-client --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  python-release:
    name: Python Release
    needs: rust-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv run make install

      - name: Clean build artifacts
        run: |
          uv run make clean-build

      - name: Build package
        run: |
          uvx maturin build --release -m py-ih-muse/Cargo.toml --out dist

      # Use PyPI trusted publisher
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: needs.rust-release.outputs.release_created == 'true'
        with:
          packages-dir: dist/
          verify-tag: false # Since release is created by release-please

      # Fallback to TestPyPI if no release
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: needs.rust-release.outputs.release_created != 'true'
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
          verify-tag: false

  update-changelog:
    name: Update Changelog
    needs: rust-release
    runs-on: ubuntu-latest
    if: needs.rust-release.outputs.release_created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ needs.rust-release.outputs.version }}
          release-notes: ${{ needs.rust-release.outputs.body }}

      - name: Commit updated Changelog
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "docs(changelog): update changelog"
          file_pattern: CHANGELOG.md

update-changelog:
  name: Update Changelog
  needs: rust-release
  runs-on: ubuntu-latest
  if: needs.rust-release.outputs.release_created == 'true'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          CHANGELOG.md
        generate_release_notes: true
