name: Release

on:
  push:
    branches:
      - main
    paths:
      - "crates/**"
      - "docs/**"
      - "py-ih-muse/**"
      - "Cargo.toml"

  release:
    types:
      - released

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  rust-release:
    name: Rust Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish IH-Muse package
        run: |
          cd crates
          cargo publish --allow-dirty -p ih-muse-proto --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-record --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-client --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v5.23.0
        with:
          publish: true
          tag: v${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-release:
    name: Python Release
    needs: rust-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build source distribution with maturin
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: >
            --manifest-path py-ih-muse/Cargo.toml
            --out dist

      - name: Build wheels with maturin
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: >
            --manifest-path py-ih-muse/Cargo.toml
            --out dist

      - name: Debug - List dist contents
        run: |
          echo "Contents of dist directory:"
          ls -l dist/

      - name: Test sdist
        run: |
          # Find the first .tar.gz file in the dist directory
          SDIST=$(find dist -name "*.tar.gz" | head -n 1)
          if [ -z "$SDIST" ]; then
            echo "No source distribution found!"
            exit 1
          fi
          pip install --force-reinstall --verbose "$SDIST"
          python -c 'import ih_muse'

      - name: Upload wheels and source distribution
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*

  publish-to-pypi:
    name: Publish to PyPI
    needs: python-release
    runs-on: ubuntu-latest
    if: needs.rust-release.result == 'success'
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v3
        with:
          name: "wheels-*"
          path: dist

      - name: List dist contents
        run: |
          ls -l dist/
          find dist -name "*.whl"

      - name: Prepare wheels for upload
        run: |
          mkdir -p final-dist
          find dist -name "*.whl" -exec cp {} final-dist/ \;

      - name: List final dist contents
        run: ls -l final-dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: final-dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: false
