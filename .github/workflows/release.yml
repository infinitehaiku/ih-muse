name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  rust-release:
    name: Rust Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.check-version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      # Check if there is a parent commit
      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "parent_sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      # Version detection
      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.parent_sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.1
        with:
          version-command: |
            cd crates/ih-muse && cargo metadata --format-version 1 | jq -r '.packages[0].version'

      # Publish ih-muse package
      - name: Publish main Rust package
        if: steps.check-version.outputs.tag
        run: |
          cd crates/ih-muse
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  python-release:
    name: Python Release
    needs: rust-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install build dependencies
        run: |
          uv pip install build twine

      - name: Clean build artifacts
        run: |
          uv run python -c "import shutil; import os; shutil.rmtree('dist', ignore_errors=True); shutil.rmtree('build', ignore_errors=True); shutil.rmtree('py-ih-muse/target', ignore_errors=True);"

      - name: Build package
        run: |
          uv run python -m build

      # Only publish to PyPI if Rust release created a tag
      - name: Publish package on PyPI
        if: needs.rust-release.outputs.release_created
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv run twine upload dist/*

      # Publish to TestPyPI if no tag was created
      - name: Publish package on TestPyPI
        if: ${{ !needs.rust-release.outputs.release_created }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          uv run twine upload dist/*

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v5.23.0
        with:
          publish: ${{ needs.rust-release.outputs.release_created != '' }}
          tag: ${{ needs.rust-release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
