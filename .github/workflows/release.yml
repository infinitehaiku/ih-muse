name: Release

on:
  push:
    branches:
      - main
    paths:
      - "crates/**"
      - "docs/**"
      - "py-ih-muse/**"
      - "Cargo.toml"

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  rust-release:
    name: Rust Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Release Drafter
        id: release-drafter
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish IH-Muse package
        run: |
          cd crates
          cargo publish --allow-dirty -p ih-muse-proto --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-record --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-client --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --allow-dirty -p ih-muse-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  python-release:
    name: Python Release
    needs: rust-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build wheels with maturin
        uses: messense/maturin-action@v1
        with:
          command: build
          args: --release --out dist
          working-directory: py-ih-muse

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  publish-to-pypi:
    name: Publish to PyPI
    needs: [rust-release, python-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: List dist contents
        run: ls -l dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: false

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: python-release
    runs-on: ubuntu-latest
    if: needs.rust-release.result != 'success'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Collect wheels
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;

      - name: List dist contents
        run: ls -l dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verify-metadata: false

  update-changelog:
    name: Update Changelog
    needs: rust-release
    runs-on: ubuntu-latest
    if: needs.rust-release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Notes
        id: release-notes
        run: |
          RELEASE_NOTES=$(echo "Release version ${{ needs.rust-release.outputs.version }}")
          echo "body=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ needs.rust-release.outputs.version }}
          release-notes: ${{ steps.release-notes.outputs.body }}

      - name: Commit updated Changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "docs(changelog): update changelog"
          file_pattern: CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            CHANGELOG.md
          body: ${{ steps.release-notes.outputs.body }}
          generate_release_notes: true
