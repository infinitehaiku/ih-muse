name: Release

on:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: "3.11"
  RUST_VERSION: "stable"

jobs:
  # Handle versioning and release
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: rust
          package-name: ih-muse-core
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          include-v-in-tag: true
          changelog-types: >
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false},
              {"type":"perf","section":"Performance","hidden":false}
            ]

  # Publish Rust package
  publish-rust:
    needs: prepare-release
    if: ${{ needs.prepare-release.outputs.release_created }}
    runs-on: ubuntu-latest
    environment: crates.io
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Publish ih-muse-core
        run: |
          cd crates/ih-muse-core
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Publish Python package
  publish-python:
    needs: [prepare-release, publish-rust]
    if: ${{ needs.prepare-release.outputs.release_created }}
    runs-on: ubuntu-latest
    environment: pypi
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release -m py-ih-muse/Cargo.toml
          sccache: "true"
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: target/wheels/*.whl

      - name: Publish to PyPI
        if: matrix.target == 'x86_64' # Only publish once
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine upload target/wheels/*.whl
